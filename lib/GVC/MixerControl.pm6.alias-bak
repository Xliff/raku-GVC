use v6.v;

use GVC::Raw::Types;
use GVC::Raw::MixerControl;

use GLib::Roles::Object;
use GLib::Roles::Implementor;


our subset GvcMixerControlAncestry is export of Mu
  where GvcMixerControl | GObject;

class GVC::MixerConmtrol {
  also does GLib::Roles::Object;

  has GvcMixerControl $!gmc is implementor;

  submethod BUILD ( :$object-var ) {
    self.setGvcMixerControl($object-var)
      if $object-var
  }

  method setGvcMixerControl (GvcMixerControlAncestry $_) {
    my $to-parent;

    $!gmc = do {
      when GvcMixerControl {
        $to-parent = cast(GObject, $_);
        $_;
      }

      default {
        $to-parent = $_;
        cast(GvcMixerControl, $_);
      }
    }
    self!setObject($to-parent);
  }

  method GVC::Raw::Definitions::GvcMixerControl
  { $!gmc }

  multi method new ($object-var where * ~~ GvcMixerControlAncestry , :$ref = True) {
    return unless $object-var;

    my $o = self.bless( :$object-var );
    $o.ref if $ref;
    $o;
  }

  multi method new {
    my $gvc-mixer-control = gvc_mixer_control_new();

    $gvc-mixer-control ?? self.bless( :$gvc-mixer-control ) !! Nil;
  }

  method change_input (GvcMixerUIDevice() $input) {
    gvc_mixer_control_change_input($!gmc, $input);
  }

  method change_output (GvcMixerUIDevice() $output) {
    gvc_mixer_control_change_output($!gmc, $output);
  }

  method change_profile_on_selected_device (
    GvcMixerUIDevice() $device,
    Str()              $profile
  ) {
    gvc_mixer_control_change_profile_on_selected_device(
      $!gmc,
      $device,
      $profile
    );
  }

  method close {
    gvc_mixer_control_close($!gmc);
  }

  method get_cards {
    gvc_mixer_control_get_cards($!gmc);
  }

  method get_default_sink {
    gvc_mixer_control_get_default_sink($!gmc);
  }

  method get_default_source {
    gvc_mixer_control_get_default_source($!gmc);
  }

  method get_event_sink_input {
    gvc_mixer_control_get_event_sink_input($!gmc);
  }

  method get_sink_inputs {
    gvc_mixer_control_get_sink_inputs($!gmc);
  }

  method get_sinks {
    gvc_mixer_control_get_sinks($!gmc);
  }

  method get_source_outputs {
    gvc_mixer_control_get_source_outputs($!gmc);
  }

  method get_sources {
    gvc_mixer_control_get_sources($!gmc);
  }

  method get_state {
    gvc_mixer_control_get_state($!gmc);
  }

  method get_stream_from_device (GvcMixerUIDevice() $device) {
    gvc_mixer_control_get_stream_from_device($!gmc, $device);
  }

  method get_streams {
    gvc_mixer_control_get_streams($!gmc);
  }

  method get_type {
    state ($n, $t);

    unstable_get_type( self.^name, &gvc_mixer_control_get_type, $n, $t );
  }

  method get_vol_max_amplified {
    gvc_mixer_control_get_vol_max_amplified($!gmc);
  }

  method get_vol_max_norm {
    gvc_mixer_control_get_vol_max_norm($!gmc);
  }

  method lookup_card_id (Int() $id) {
    my guint $i = $id;

    gvc_mixer_control_lookup_card_id($!gmc, $i);
  }

  method lookup_device_from_stream (GvcMixerStream()  $stream) {
    gvc_mixer_control_lookup_device_from_stream($!gmc, $stream);
  }

  method lookup_input_id (Int() $id) {
    my guint $i = $id;

    gvc_mixer_control_lookup_input_id($!gmc, $i);
  }

  method lookup_output_id (Int() $id) {
    my guint $i = $id
    gvc_mixer_control_lookup_output_id($!gmc, $i);
  }

  method lookup_stream_id (Int() $id) {
    my guint $i = $id;

    gvc_mixer_control_lookup_stream_id($!gmc, $i);
  }

  method open {
    gvc_mixer_control_open($!gmc);
  }

  method set_default_sink (GvcMixerStream() $stream) {
    gvc_mixer_control_set_default_sink($!gmc, $stream);
  }

  method set_default_source (GvcMixerStream() $stream) {
    gvc_mixer_control_set_default_source($!gmc, $stream);
  }

  method set_headset_port (Int() $id, Int() $choices) {
    my guint                $i = $id;
    my GvcHeadsetPortChoice $c = $choices;

    gvc_mixer_control_set_headset_port($!gmc, $i, $c);
  }

}
